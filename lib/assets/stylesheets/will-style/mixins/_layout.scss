//
// LAYOUT
//

// use this on an empty div just before an element you want to look like as being full-height
// then add the background or border you need.
//
// The div should also have the same column classes as the element
//
@mixin full-height($is-app-nav-private: false) {
	@if $is-app-nav-private {
		position: fixed;
	} @else {
		position: absolute;
	}

	top: 0;
	left: 0;
	bottom: 0;
	z-index: -1;
}

@mixin stretch($offset-top: 0, $offset-right: 0, $offset-bottom: 0, $offset-left: 0) {
	position: absolute;

	@if $offset-top {
		top: $offset-top;
	}
	@if $offset-bottom {
		bottom: $offset-bottom;
	}
	@if $offset-left {
		left: $offset-left;
	}
	@if $offset-right {
		right: $offset-right;
	}
}

// @NOTE: Phones do weird things with 100vh.
// This fixes it without having to do weird position: fixed stuff.

@mixin stretch {
	min-height: 100vh;

	html.touchevents & {
		min-height: stretch;
		min-height: -webkit-fill-available;
		min-height: -moz-available;
	}
}

@mixin stretch {
	min-height: 100vh;

	html.touchevents & {
		min-height: stretch;
		min-height: -webkit-fill-available;
		min-height: -moz-available;
	}
}

@mixin stretch-max {
	max-height: 100vh;

	html.touchevents & {
		max-height: stretch;
		max-height: -webkit-fill-available;
		max-height: -moz-available;
	}
}

@mixin iphone-notch-padding-left {
	padding-left: env(safe-area-inset-left);
}

@mixin iphone-notch-padding-right {
	padding-right: env(safe-area-inset-right);
}

@mixin iphone-notch-padding {
	@include iphone-notch-padding-left;
	@include iphone-notch-padding-right;
}
